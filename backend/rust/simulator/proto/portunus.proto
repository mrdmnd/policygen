syntax = "proto3";

package portunus;

/*
 * Encounter Setup and Scripting
 *
 * We model a dungeon as a series of "pulls", where a "pull" is separated into a
 * "setup" phase (out of combat) lasting a fixed number of seconds, and a
 * "combat" phase" where your group damages the active mobs in the pull until
 * they are dead, at which point you exit combat, and begin the setup phase of
 * the next pull. We also assume that you can re-CC the mobs you CC'd during the
 * setup phase for "free" (i.e. we don't model the GCD cost of re-CCing mobs
 * during the pull).
 *
 * Every pull has a setup phase - this might be very short (potentially zero
 * seconds for a chain pull, where you grab the next group before dropping
 * combat with the current group) - or very long, like when you do a shroud skip
 * or a death skip and have to mass res, or have a complicated pre-CC setup.
 *
 * TODO: Pulls should be able to be gated by CDs - imagine a hard mutex that
 * BLOCKS until you have certain CDs ready (defensives, offensives, whatever) on
 * specific players.
 */

// Enemies are simple for now. Eventually we will support enemy scripts
// (patterns for spell queueing, etc).
message Enemy {
  string name = 1;
  int32 id = 2;
  int32 hp = 3;
}

// Every pull has a "combat" phase. A combat phase places all players in
// the group in combat with all of the enemies, until all players or all enemies
// are dead.
message CombatPhase { repeated Enemy enemies = 1; }

// Every pull as a "setup phase" where you are assumed to be either travelling,
// recovering CDs, drinking, etc. This is the "time between combat", more or
// less.
message SetupPhase {
  // Length in seconds of the pre-combat phase.
  int32 duration = 1;

  // TODO: implement precombat actions
  // includes pre-pot, CDs you want to hit pre-combat, drinking water for mana,
  // etc. repeated Action precombat_actions = 2; number of seconds before setup
  // phase ends to perform action repeated int32 precombat_action_timings = 3;
}

// A pull is therefore just a setup phase followed by a combat phase.
// TODO: support chain pulls and variable setup phases (waiting on CDs to come
// up)
message Pull {
  SetupPhase setup_phase = 1;
  CombatPhase combat_phase = 2;
}

// A DungeonRouteConfig is a collection of Pulls with some metadata.
message DungeonRouteConfig {
  string name = 1;
  repeated Pull pulls = 2;
}

/*
 * Team Configuration
 *
 * Team configuration captures static information available at dungeon-start
 * from all the players. This includes race/spec/gear/talents.
 */

// Available player races.
enum Race {
  UNUSED_RACE = 0;
  HUMAN = 1;
  DWARF = 2;
  NIGHT_ELF = 3;
  GNOME = 4;
  ORC = 5;
  TROLL = 6;
  UNDEAD = 7;
  TAUREN = 8;
  DRAENEI = 9;
  BLOOD_ELF = 10;
  WORGEN = 11;
  GOBLIN = 12;
  PANDAREN = 13;
  NIGHTBORNE = 14;
  HIGHMOUNTAIN_TAUREN = 15;
  VOID_ELF = 16;
  LIGHTFORGED_DRAENEI = 17;
}

// Available player specializations.
enum Specialization {
  UNUSED_SPECIALIZATION = 0;
  DEATH_KNIGHT_FROST = 1;
  DEATH_KNIGHT_UNHOLY = 2;
  DEATH_KNIGHT_BLOOD = 3;
  DEMON_HUNTER_HAVOC = 4;
  DEMON_HUNTER_VENGEANCE = 5;
  DRUID_BALANCE = 6;
  DRUID_FERAL = 7;
  DRUID_RESTORATION = 8;
  DRUID_GUARDIAN = 9;
  HUNTER_BEAST_MASTERY = 10;
  HUNTER_MARKSMANSHIP = 11;
  HUNTER_SURVIVAL = 12;
  MAGE_ARCANE = 13;
  MAGE_FIRE = 14;
  MAGE_FROST = 15;
  MONK_WINDWALKER = 16;
  MONK_BREWMASTER = 17;
  MONK_MISTWEAVER = 18;
  PALADIN_RETRIBUTION = 19;
  PALADIN_HOLY = 20;
  PALADIN_PROTECTION = 21;
  PRIEST_SHADOW = 22;
  PRIEST_DISCIPLINE = 23;
  PRIEST_HOLY = 24;
  ROGUE_ASSASSINATION = 25;
  ROGUE_OUTLAW = 26;
  ROGUE_SUBTLETLY = 27;
  SHAMAN_ELEMENTAL = 28;
  SHAMAN_ENHANCEMENT = 29;
  SHAMAN_RESTORATION = 30;
  WARLOCK_AFFLICTION = 31;
  WARLOCK_DEMONOLOGY = 32;
  WARLOCK_DESTRUCTION = 33;
  WARRIOR_ARMS = 34;
  WARRIOR_FURY = 35;
  WARRIOR_PROTECTION = 36;
}

// Talents is a string of the form [1-3]{7}
message Talents { string encoded_talents = 1; }

// Item configuration: items are worn in a specific "slot", listed here.
enum Slot {
  UNUSED_SLOT = 0;
  HEAD = 1;
  NECK = 2;
  SHOULDER = 3;
  BACK = 4;
  CHEST = 5;
  WRIST = 6;
  HANDS = 7;
  WAIST = 8;
  LEGS = 9;
  FEET = 10;
  FINGER1 = 11;
  FINGER2 = 12;
  TRINKET1 = 13;
  TRINKET2 = 14;
  MAIN_HAND = 15;
  OFF_HAND = 16;
}

// A wearable item has a slot, an item_id, as well as a few extra ids (enchant,
// gems, bonus).
message WearableItem {
  Slot slot = 1;
  int32 item_id = 2;
  int32 enchant_id = 3;
  repeated int32 gem_ids = 4;
  repeated int32 bonus_ids = 5;
}

// A Gearset is just a collection of wearable items.
message Gearset { repeated WearableItem items = 1; }

// A PlayerConfig captures pre-dungeon setup for each player.
// This is all of the "static" configuration information we have.
message PlayerConfig {
  string name = 1;
  Race race = 2;
  Specialization spec = 3;
  Talents talents = 4;
  Gearset gearset = 5;
}

// Team Config:
// A TeamConfig wraps the PlayerConfigs of the various players on the team.
message TeamConfig {
  string name = 1;
  repeated PlayerConfig player_configs = 2;
}

/*
 * Policy Configuration
 *
 * A "policy" is a mapping from game-state to action taken.
 * We require that each player on the team is configured with a policy that can
 * be used to drive the simulator. Rather than using SIMC's model of an "APL"
 * where we walk down a short-circuiting list of actions to take, our policies
 * are implemented directly in native code (Rust code) rather than a pseudocode
 * language.
 *
 * Policies can be either hard coded (explicitly programmed) to go from state to
 * action, or rely on a machine learning model (like a trained reinforcement
 * learning model) with weights and connections. They just have to implement the
 * "Policy" interface, which is defined as a function that goes from the
 * state-space of the game to the action-space of the actors.
 *
 * TODO(mrdmnd): define the interface here. Does this code get COMPILED to a
 * function? Do we just point to a file on a path somewhere? Is this even the
 * right place to include this?
 */

// Contains the code used to do policy->action application.
message PolicyConfig { string code = 1; }

/*
 * General Simulator Configuration
 *
 * Our simulator is configuring using a number of parameters. This is the space
 * for defining general catch-all control parameters.
 */

// Contains parameter configuration for general simulator statistical behavior.
message ParameterConfig {
  // Hard minimum number of iterations to perform.
  // Reasonable default: 100
  int32 min_iterations = 1;

  // Approximate maximum number of iterations to perform.
  // Not a hard max, because threads are allowed to race a bit to finish.
  // Reasonable default: 10,000
  int32 max_iterations = 2;

  // We'll halt a simulation early if the error drops below this threshold.
  // Reasonable default: 0.01
  double target_error = 3;

  // If debug is set, we produce lots of output.
  // We also run only one iteration.
  bool debug = 4;
}

message SimulationConfig {
  // `parameter_config` controls internal constants for the simulation engine
  // like iteration control, noise, debug mode, etc.
  ParameterConfig parameter_config = 1;

  // `dungeon_route_config` contains all parameters pertaining to the fight
  // script.
  DungeonRouteConfig dungeon_route_config = 2;

  // `team_config` contains the team we intend to run through the dungeon.
  TeamConfig team_config = 3;

  // `policy` represents the current policy we want our simulator to evaluate.
  // The policy might come in as a deterministic APL or a deep learning model.
  PolicyConfig policy_config = 4;
}

// Debug simulation should return an instance of a combat log for debug
// purposes.
message CombatLogMessage { string log_line = 1; }
message CombatLog { repeated CombatLogMessage messages = 1; }

// Optimized simulation should return a distribution of dungeon duration.
message DurationDistribution {
  int32 n = 1;
  double mean_duration = 2;
  double stddev_duration = 3;
}

// A SimulationResult is either a full combat log from a single debug
// run-through or a distribution over the length of the dungeon.
message SimulationResult {
  oneof output {
    CombatLog combat_log = 1;
    DurationDistribution duration_distribution = 2;
  }
  string metadata = 3;
}

// Final service interface
message SimulationRequest { SimulationConfig config = 1; }
message SimulationResponse { SimulationResult result = 1; }

service SimulationService {
  rpc ConductSimulation(SimulationRequest) returns (SimulationResponse);
}
