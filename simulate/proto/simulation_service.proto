syntax = "proto3";

package simulate;

import "simulate/proto/policy.proto";
import "simulate/proto/actor.proto";

//
//                        Encounter Configuration
//
// TODO(mrdmnd): make the timing on these probabilistic so we don't overfit?

message ActorSpawnEvent {
  Actor actor = 1;
  int32 despawn_timestamp = 2; // If -1, actor despawns when HP is zero.
}

message ActorInvulnEvent {
  Actor actor = 1;
  int32 duration = 2; // Number of timesteps that this actor is invulnerable.
}

// Logically, this is just a constraint meant to keep you casting only instants.
message MovementEvent {
  int32 duration = 1; // Number of timesteps that we are forced to move for.
}

// Logically, this is just a constraint meant to keep you from casting anything.
message StunEvent {
  int32 duration = 1; // Number of timesteps that we are unable to act for.
}

message TakeDamageEvent {
  int32 damage_amount = 1; // Amount of damage the boss deals to us.
}

message EncounterEvent {
  int32 timestamp = 1;
  oneof event {
    ActorSpawnEvent spawn = 2;
    ActorInvulnEvent invuln = 3;
    MovementEvent movement = 4;
    StunEvent stun = 5;
    TakeDamageEvent damage = 6;
  }
}

message EncounterConfig {
  int32 id = 1;
  string name = 2; // Something like "Patchwork" or "Helter Skelter"
  repeated EncounterEvent events = 3;
}

//
//                      Gearset Configuration
//

message WearableItem {
  int32 id = 1;
  string name = 2;
  enum Slot {
    HEAD = 0;
    NECK = 1;
    SHOULDERS = 2;
    BACK = 3;
    CHEST = 4;
    WRISTS = 5;
    HANDS = 6;
    WAIST = 7;
    LEGS = 8;
    FEET = 9;
    FINGER1 = 10;
    FINGER2 = 11;
    TRINKET1 = 12;
    TRINKET2 = 13;
    MAINHAND = 14;
    OFFHAND = 15;
  }
  Slot slot = 3;

  int32 main_stat = 4;
  int32 crit_rating = 5;
  int32 haste_rating = 6;
  int32 mastery_rating = 7;
  int32 versatility_rating = 8;
  int32 spell_power = 9;
  int32 attack_power = 10;
  int32 weapon_dps = 11;
  int32 weapon_speed = 12;

  // If this item is part of a set bonus, we want to know.
  // I.e. if you have a belt and gloves that are tier, they'd both have the same
  // non-zero value here.
  int32 set_bonus_id = 13;
}

message EquipmentConfig {
  WearableItem head = 1;
  WearableItem neck = 2;
  WearableItem shoulders = 3;
  WearableItem back = 4;
  WearableItem chest = 5;
  WearableItem wrists = 6;
  WearableItem hands = 7;
  WearableItem waist = 8;
  WearableItem legs = 9;
  WearableItem feet = 10;
  WearableItem finger1 = 11;
  WearableItem finger2 = 12;
  WearableItem trinket1 = 13;
  WearableItem trinket2 = 14;
  WearableItem mainhand = 15;
  WearableItem offhand = 16;

  // If this gearset represents any full or partial gearsets, keep track here.
  repeated int32 set_bonus_ids = 17;
}

//
//                              Talent configuration
//

message TalentConfig {
  int32 row_1 = 1;
  int32 row_2 = 2;
  int32 row_3 = 3;
  int32 row_4 = 4;
  int32 row_5 = 5;
  int32 row_6 = 6;
  int32 row_7 = 7;
}

//
//                              Simulation configuration
//

message SimulationConfig {
  EncounterConfig encounter_config = 1;
  EquipmentConfig equipment_config = 2;
  TalentConfig talent_config = 3;
  TrainedPolicy policy = 4;
}

// TODO(mrdmnd): what to do with highly non-gaussian distributions?
message DPSDistribution {
  double mean = 1;
  double variance = 2;
}

// message SimulationRequest { SimulationConfig config = 1; }

message SimulationRequest { string request_string = 1; }

message SimulationResponse { string response_string = 1; }

service SimulationService {
  rpc ConductSimulation(SimulationRequest) returns (SimulationResponse) {}
}
