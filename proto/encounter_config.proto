syntax = "proto3";

package simulatorproto;

enum EnemyType {
  UNUSED_ENEMYTYPE = 0;
  BOSS = 1;
  PRIORITY_ADD = 2;
  ADD = 3;
}

message Enemy {
  int32 id = 1;
  string name = 2;
  EnemyType type = 3;
  int32 hp = 4;
}

message EnemyInvulnEvent {
  Enemy enemy = 1;
  int32 duration = 2;  // Number of timesteps that this actor is invulnerable.
}

// Logically, this is just a constraint meant to keep you casting only instants.
message CombatMovementEvent {
  int32 duration = 1;  // Number of timesteps that we are forced to move for.
}

// Logically, this is just a constraint meant to keep you from casting anything.
message CombatStunEvent {
  int32 duration = 1;  // Number of timesteps that we are unable to act for.
}

message TakeDamageEvent {
  int32 damage_amount = 1;  // Amount of damage the boss deals to us.
}

message EncounterEvent {
  int32 timestamp = 1;
  oneof event {
    EnemySpawnEvent spawn = 2;
    EnemyInvulnEvent invuln = 3;
    MovementEvent movement = 4;
    StunEvent stun = 5;
    TakeDamageEvent damage = 6;
    BloodlustEvent lust = 7;
    EnemyDespawnEvent despawn = 8;
  }
}

// We model a dungeon as a series of "pulls", where a "pull" is separated into a
// "setup" phase of a fixed number of seconds, and a "combat" phase" where you
// damage the active mobs in the pull until they are dead, at which point you
// exit combat, and begin the setup phase of the next pull. We also assume that
// you can re-CC the mobs you CC'd during the setup phase for "free" (we don't
// model the GCD cost of re-CCing mobs during the pull).

// Every pull has a setup phase - this might be very short (potentially zero
// seconds for a chain pull, where you grab the next group before dropping
// combat with the current group) - or very long, like when you do a shroud skip
// or a death skip and have to mass res, or have a complicated pre-CC setup.

// You can designate a pull to use a prepot; if you do, this event triggers in
// the setup phase at one second before the combat phase starts.
message SetupPhase {
  int32 duration = 1;
  repeated Action precombat_actions =
      4;  // includes pre-pot, CDs you want to hit pre-combat, etc
  repeated int32 precombat_action_timings =
      5;  // for each index in above list, number of seconds before setup phase
          // ends to hit the action
}

// Every pull also has a "combat" phase. A combat phase places all players in
// the group in combat.
message CombatPhase {
  repeated Enemy enemies = 2;
}

// A pull is just a setup phase followed by a combat phase.
message Pull {
  SetupPhase setup = 1;
  CombatPhase combat = 2;
}

// Top level fight configuration.
message EncounterConfig {
  // Something descriptive and human readable, like "Freehold"
  string name = 1;

  // A sorted sequence of encounter events.
  repeated EncounterEvent events = 4;
}
