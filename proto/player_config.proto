syntax = "proto3";

package simulate;

message WearableItem {
  int32 id = 1;
  string name = 2;
  enum Slot {
    HEAD = 0;
    NECK = 1;
    SHOULDERS = 2;
    BACK = 3;
    CHEST = 4;
    WRISTS = 5;
    HANDS = 6;
    WAIST = 7;
    LEGS = 8;
    FEET = 9;
    FINGER1 = 10;
    FINGER2 = 11;
    TRINKET1 = 12;
    TRINKET2 = 13;
    MAINHAND = 14;
    OFFHAND = 15;
  }
  Slot slot = 3;

  int32 main_stat = 4;
  int32 crit_rating = 5;
  int32 haste_rating = 6;
  int32 mastery_rating = 7;
  int32 versatility_rating = 8;
  int32 spell_power = 9;
  int32 attack_power = 10;

  // If this item is part of a set bonus, we want to know.
  // I.e. if you have a belt and gloves that are tier, they'd both have the same
  // non-zero value here.
  int32 set_bonus_id = 13;

  // If this field is set, the item is "enchanted" and we will need to process
  // the enchantment buff in the sim.
  int32 enchantment_id = 14;

  // Items may have sockets, if so, the item is "socketed" and we will need to
  // process the socket bonuses in the sim.
  repeated int32 gem_id = 15;

  // Item might have some special effects we want to track.
  int32 special_effect_id = 16;
}

message EquipmentConfig {
  WearableItem head = 1;
  WearableItem neck = 2;
  WearableItem shoulders = 3;
  WearableItem back = 4;
  WearableItem chest = 5;
  WearableItem wrists = 6;
  WearableItem hands = 7;
  WearableItem waist = 8;
  WearableItem legs = 9;
  WearableItem feet = 10;
  WearableItem finger1 = 11;
  WearableItem finger2 = 12;
  WearableItem trinket1 = 13;
  WearableItem trinket2 = 14;
  WearableItem mainhand = 15;
  WearableItem offhand = 16;

  int32 mainhand_swing_time = 17;  // Given in MILLISECONDS
  int32 offhand_swing_time = 18;   // Given in MILLISECONDS
  int32 mainhand_min_damage = 19;
  int32 mainhand_max_damage = 20;
  int32 offhand_min_damage = 21;
  int32 offhand_max_damage = 22;
}

message TalentConfig {
  int32 row_1 = 1;
  int32 row_2 = 2;
  int32 row_3 = 3;
  int32 row_4 = 4;
  int32 row_5 = 5;
  int32 row_6 = 6;
  int32 row_7 = 7;
}

enum Specialization {
  ROGUE_ASSASSINATION = 0;
  ROGUE_OUTLAW = 1;
  ROGUE_SUBTLETLY = 2;
}

enum Race {
  HUMAN = 0;
  DWARF = 1;
  NIGHT_ELF = 2;
  GNOME = 3;
  ORC = 4;
  TROLL = 5;
  UNDEAD = 6;
  TAUREN = 7;
  DRAENEI = 8;
  BLOOD_ELF = 9;
  WORGEN = 10;
  GOBLIN = 11;
  PANDAREN = 12;
}

message Consumables {
  int32 flask_id = 1;
  int32 food_id = 2;
  int32 augment_id = 3;
}

message PlayerConfig {
  EquipmentConfig equipment_config = 1;
  TalentConfig talent_config = 2;
  Specialization spec = 3;
  Race race = 4;
  Consumables consumables = 5;
  string player_name = 6;
}
